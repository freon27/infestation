<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.AI_grid=mp_grid_create(0,0,room_width/16,room_height/16,32,32); //Creates the mp_grid
mp_grid_add_instances(global.AI_grid,obstruction,false); //Adds all instances of wall object to AI grid...

camera_speed = 5

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_left)
{
    view_xview[0] -= camera_speed
}
if keyboard_check(vk_right)
{
    view_xview[0] += camera_speed
}
if keyboard_check(vk_up)
{
    view_yview[0] -= camera_speed
}
if keyboard_check(vk_down)
{
    view_yview[0] += camera_speed
}

with EnemyObject {
    self.visible = false
    with PlayerObject {
        if (! collision_line(self.x, self.y, other.x, other.y, obstruction, 1, 1)) {
            other.visible = true
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
instance_found = instance_position(mouse_x,mouse_y,PlayerObject)
if (instance_found == noone){
    with(PlayerObject){
        if (self.selected){   
            mypath=path_add(); //creates an empty path...
            
            if !mp_grid_path(global.AI_grid,mypath,self.x,self.y,mouse_x, mouse_y, true){ //Checks to see if the path is possible...
                speed=0; //If no path is found it goes into alert state...
                // play sound here
            }
            else {
                mp_grid_path(global.AI_grid,mypath,self.x,self.y,mouse_x, mouse_y,true); //Assigns the path...
                path_set_kind(mypath,1); //Sets the path to allow diagonals
                path_set_precision(mypath,8); //Sets the precision to make it curvy. Can be 1-8. 1 is straight, 8 curvy...
                path_start(mypath,self.walking_speed,0,false); //Starts the path...
            }
        }
    }
}
else { 
    with(PlayerObject){
        if (position_meeting(mouse_x, mouse_y, self.id)){
            selected = 1
            view_object[0] = self.object_index
        }
        else {
            selected = 0
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (PlayerObject) {
    ammo_perc = ceil(self.current_clip / self.clip_size * 100) 
    draw_healthbar(self.x - 10,self.y - 20,self.x + 10,self.y - 16,ammo_perc,c_black,c_red,c_green,0,1,1)
    if (selected){
        draw_line_width_color(self.x - 16, self.y + 20,self.x + 16,self.y + 20, 1, c_white, c_white)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsShapePoints/>
</object>
